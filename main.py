import datetime
import asyncio
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile

from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn

# --- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ common.py ---
from common import (
    load_data, save_data,
    ensure_user, require_login, require_web_login,
    bot as telegram_bot, dp as telegram_dp,
    DATA_FILE, DISK_PATH
)

# --- Telegram‚Äë–±–æ—Ç: –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫—É–ø–∫–∏ –∏ —É—Ö–æ–¥–∞ –∑–∞ –ø–∏—Ç–æ–º—Ü–µ–º ---

@telegram_dp.message(Command("buy_pet"))
@require_login
async def cmd_buy_pet(message: Message):
    data = load_data()
    catalog = data.get("pets_catalog", {})
    kb = InlineKeyboardMarkup(row_width=2)
    for key, pet in catalog.items():
        kb.insert(InlineKeyboardButton(
            text=f"{pet['name']} ‚Äî {pet['price']} üíé",
            callback_data=f"buy_pet:{key}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb)

@telegram_dp.callback_query(lambda c: c.data and c.data.startswith("buy_pet:"))
async def cb_buy_pet(callback: CallbackQuery):
    _, pet_type = callback.data.split(":", 1)
    user_id = str(callback.from_user.id)
    data = load_data()
    user = data["users"][user_id]
    pet = data["pets_catalog"].get(pet_type)
    if not pet:
        await callback.answer("‚ùó –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    if user.get("balance", 0) < pet["price"]:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíé", show_alert=True); return

    user["balance"] -= pet["price"]
    data.setdefault("user_pets", {})[user_id] = {
        "type": pet_type,
        "hunger": 100,
        "happiness": 100,
        "last_care": datetime.datetime.now().isoformat()
    }
    save_data(data)
    await callback.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {pet['name']}! üéâ")
    await callback.message.edit_reply_markup()

@telegram_dp.message(Command("pet"))
@require_login
async def cmd_show_pet(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    up = data.get("user_pets", {}).get(user_id)
    if not up:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –ö—É–ø–∏—Ç–µ –µ–≥–æ –≤ /buy_pet"); return

    pet_info = data["pets_catalog"][up["type"]]
    text = (
        f"üêæ <b>–í–∞—à –ø–∏—Ç–æ–º–µ—Ü:</b> {pet_info['name']}\n"
        f"üçó –ì–æ–ª–æ–¥: {up['hunger']}%\n"
        f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {up['happiness']}%"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçñ", callback_data="care:feed")],
        [InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéæ", callback_data="care:play")]
    ])
    await message.answer_animation(
        animation=FSInputFile(DISK_PATH / pet_info["animation"]),
        caption=text,
        parse_mode="HTML",
        reply_markup=kb
    )

@telegram_dp.callback_query(lambda c: c.data and c.data.startswith("care:"))
async def cb_care(callback: CallbackQuery):
    action = callback.data.split(":",1)[1]
    user_id = str(callback.from_user.id)
    data = load_data()
    up = data.setdefault("user_pets", {}).get(user_id)
    if not up:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞", show_alert=True); return

    if action == "feed":
        up["hunger"] = min(100, up["hunger"] + 20)
        msg = "–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞! üçñ"
    else:
        up["happiness"] = min(100, up["happiness"] + 20)
        msg = "–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º! üéæ"

    up["last_care"] = datetime.datetime.now().isoformat()
    save_data(data)
    await callback.answer(msg)
    await cmd_show_pet(callback.message)

# --- FastAPI: –∫–∞—Ç–∞–ª–æ–≥ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –≤–µ–± ---

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

@app.get("/pets", response_class=HTMLResponse)
async def pets_catalog(request: Request):
    user_id = request.cookies.get("user_id")
    data = load_data()
    catalog = data.get("pets_catalog", {})
    balance = None
    if user_id and data["users"].get(user_id):
        balance = data["users"][user_id].get("balance", 0)
    return templates.TemplateResponse("pets_catalog.html", {
        "request": request,
        "catalog": catalog,
        "balance": balance,
        "user_id": user_id
    })

@app.post("/pets/buy")
async def buy_pet_web(request: Request, pet_type: str = Form(...)):
    user_id = request.cookies.get("user_id")
    if not user_id or not require_web_login(request):
        return RedirectResponse("/pets", status_code=303)
    data = load_data()
    user = data["users"][user_id]
    pet = data.get("pets_catalog", {}).get(pet_type)
    if not pet:
        return HTMLResponse("‚ùó –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω", status_code=404)
    if user.get("balance", 0) < pet["price"]:
        return RedirectResponse("/pets?error=–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ+—Å—Ä–µ–¥—Å—Ç–≤", status_code=303)

    user["balance"] -= pet["price"]
    data.setdefault("user_pets", {})[user_id] = {
        "type": pet_type,
        "hunger": 100,
        "happiness": 100,
        "last_care": datetime.datetime.now().isoformat()
    }
    save_data(data)
    return RedirectResponse("/pets", status_code=303)

# --- –ó–∞–ø—É—Å–∫ Web + Bot ---

async def main():
    bot_task = asyncio.create_task(telegram_dp.start_polling(telegram_bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    web_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, web_task)

if __name__ == "__main__":
    asyncio.run(main())
